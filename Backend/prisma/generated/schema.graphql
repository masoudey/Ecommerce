
"""
This file was generated by graphql-schema-generator which is
maintained by prisma-korea.

Do not make changes to this file directly.
Read more about in https://github.com/prisma-korea/graphql-schema-generator.
"""
type Query {
  product(id: ID!): Product
  products: [Product!]!
  color(id: ID!): Color
  colors: [Color!]!
  size(id: ID!): Size
  sizes: [Size!]!
  cart(id: ID!): Cart
  carts: [Cart!]!
  cartitem(id: ID!): CartItem
  cartitems: [CartItem!]!
  order(id: ID!): Order
  orders: [Order!]!
  orderitem(id: ID!): OrderItem
  orderitems: [OrderItem!]!
  payment(id: ID!): Payment
  payments: [Payment!]!
  category(id: ID!): Category
  categorys: [Category!]!
  reviews(id: ID!): Reviews
  reviewss: [Reviews!]!
  saleevent(id: ID!): SaleEvent
  saleevents: [SaleEvent!]!
  store(id: ID!): Store
  stores: [Store!]!
  user(id: ID!): User
  users: [User!]!
  address(id: ID!): Address
  addresss: [Address!]!
  profile(id: ID!): Profile
  profiles: [Profile!]!
}

input ProductCreateInput {
  name: String!
  description: String
  images: [String!]!
  price: Float
  discount: Float
  code: Int
  stock: Int
  salesCount: Int!
  features: String
  tags: String!
  Manufacturer: String
  isFeatured: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Store!
  reviews: [Reviews!]!
  categories: [Category!]!
  cartItem: CartItem
  orderItem: OrderItem
  colors: [Color!]!
  sizes: [Size!]!
  events: SaleEvent
}

input ProductUpdateInput {
  name: String
  description: String
  images: [String!]
  price: Float
  discount: Float
  code: Int
  stock: Int
  salesCount: Int
  features: String
  tags: String
  Manufacturer: String
  isFeatured: Boolean
  isArchived: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: Store
  reviews: [Reviews!]
  categories: [Category!]
  cartItem: CartItem
  orderItem: OrderItem
  colors: [Color!]
  sizes: [Size!]
  events: SaleEvent
}

input ColorCreateInput {
  name: String!
  value: String!
  availability: Boolean
  price: Float
  imageUrl: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]!
}

input ColorUpdateInput {
  name: String
  value: String
  availability: Boolean
  price: Float
  imageUrl: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  products: [Product!]
}

input SizeCreateInput {
  name: String!
  value: Float!
  description: String
  availability: Boolean
  price: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]!
}

input SizeUpdateInput {
  name: String
  value: Float
  description: String
  availability: Boolean
  price: Float
  createdAt: DateTime
  updatedAt: DateTime
  products: [Product!]
}

input CartCreateInput {
  status: String
  user: User!
  createdAt: DateTime!
  cartItems: [CartItem!]!
}

input CartUpdateInput {
  status: String
  user: User
  createdAt: DateTime
  cartItems: [CartItem!]
}

input CartItemCreateInput {
  cart: Cart!
  product: Product!
  quantity: Int!
}

input CartItemUpdateInput {
  cart: Cart
  product: Product
  quantity: Int
}

input OrderCreateInput {
  store: Store!
  totalAmount: Float!
  status: OrderStatus!
  orderDate: DateTime!
  orderItems: [OrderItem!]!
  payments: [Payment!]!
  shippingAddress: Address
}

input OrderUpdateInput {
  store: Store
  totalAmount: Float
  status: OrderStatus
  orderDate: DateTime
  orderItems: [OrderItem!]
  payments: [Payment!]
  shippingAddress: Address
}

input OrderItemCreateInput {
  order: Order!
  product: Product!
  quantity: Int!
  price: Float!
}

input OrderItemUpdateInput {
  order: Order
  product: Product
  quantity: Int
  price: Float
}

input PaymentCreateInput {
  amount: Float!
  currency: String!
  status: PaymentStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  paymentMethod: String!
}

input PaymentUpdateInput {
  amount: Float
  currency: String
  status: PaymentStatus
  createdAt: DateTime
  updatedAt: DateTime
  order: Order
  paymentMethod: String
}

input CategoryCreateInput {
  name: String!
  products: [Product!]!
}

input CategoryUpdateInput {
  name: String
  products: [Product!]
}

input ReviewsCreateInput {
  body: String!
  date: DateTime!
  rate: Int!
  user: User!
  product: Product!
}

input ReviewsUpdateInput {
  body: String
  date: DateTime
  rate: Int
  user: User
  product: Product
}

input SaleEventCreateInput {
  name: String!
  description: String
  category: String!
  startDate: DateTime!
  finishDate: DateTime!
  status: String
  tags: String
  discount: Float!
  stock: Int!
  images: [String!]!
  featured: Boolean!
  store: Store!
  products: [Product!]!
  totalSales: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SaleEventUpdateInput {
  name: String
  description: String
  category: String
  startDate: DateTime
  finishDate: DateTime
  status: String
  tags: String
  discount: Float
  stock: Int
  images: [String!]
  featured: Boolean
  store: Store
  products: [Product!]
  totalSales: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input StoreCreateInput {
  name: String!
  description: String!
  logo: String!
  totalSales: Int!
  owner: User!
  address: Address
  products: [Product!]!
  events: [SaleEvent!]!
  order: Order
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StoreUpdateInput {
  name: String
  description: String
  logo: String
  totalSales: Int
  owner: User
  address: Address
  products: [Product!]
  events: [SaleEvent!]
  order: Order
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  emailVerified: DateTime
  role: Role!
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  reviews: [Reviews!]!
  cart: Cart
  profile: Profile
  address: [Address!]!
  store: Store
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  emailVerified: DateTime
  role: Role
  avatarUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  reviews: [Reviews!]
  cart: Cart
  profile: Profile
  address: [Address!]
  store: Store
}

input AddressCreateInput {
  street: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
  phoneNumber: String!
  store: Store
  user: User
  order: Order
}

input AddressUpdateInput {
  street: String
  city: String
  state: String
  postalCode: String
  country: String
  phoneNumber: String
  store: Store
  user: User
  order: Order
}

input ProfileCreateInput {
  firstName: String
  lastName: String
  phoneNumber: String
  bio: String
  picture: String
  user: User!
}

input ProfileUpdateInput {
  firstName: String
  lastName: String
  phoneNumber: String
  bio: String
  picture: String
  user: User
}

type Mutation {
  createProduct(product: ProductCreateInput!): Product
  updateProduct(product: ProductUpdateInput!): Product
  deleteProduct(id: ID!): Product
  createColor(color: ColorCreateInput!): Color
  updateColor(color: ColorUpdateInput!): Color
  deleteColor(id: ID!): Color
  createSize(size: SizeCreateInput!): Size
  updateSize(size: SizeUpdateInput!): Size
  deleteSize(id: ID!): Size
  createCart(cart: CartCreateInput!): Cart
  updateCart(cart: CartUpdateInput!): Cart
  deleteCart(id: ID!): Cart
  createCartItem(cartitem: CartItemCreateInput!): CartItem
  updateCartItem(cartitem: CartItemUpdateInput!): CartItem
  deleteCartItem(id: ID!): CartItem
  createOrder(order: OrderCreateInput!): Order
  updateOrder(order: OrderUpdateInput!): Order
  deleteOrder(id: ID!): Order
  createOrderItem(orderitem: OrderItemCreateInput!): OrderItem
  updateOrderItem(orderitem: OrderItemUpdateInput!): OrderItem
  deleteOrderItem(id: ID!): OrderItem
  createPayment(payment: PaymentCreateInput!): Payment
  updatePayment(payment: PaymentUpdateInput!): Payment
  deletePayment(id: ID!): Payment
  createCategory(category: CategoryCreateInput!): Category
  updateCategory(category: CategoryUpdateInput!): Category
  deleteCategory(id: ID!): Category
  createReviews(reviews: ReviewsCreateInput!): Reviews
  updateReviews(reviews: ReviewsUpdateInput!): Reviews
  deleteReviews(id: ID!): Reviews
  createSaleEvent(saleevent: SaleEventCreateInput!): SaleEvent
  updateSaleEvent(saleevent: SaleEventUpdateInput!): SaleEvent
  deleteSaleEvent(id: ID!): SaleEvent
  createStore(store: StoreCreateInput!): Store
  updateStore(store: StoreUpdateInput!): Store
  deleteStore(id: ID!): Store
  createUser(user: UserCreateInput!): User
  updateUser(user: UserUpdateInput!): User
  deleteUser(id: ID!): User
  createAddress(address: AddressCreateInput!): Address
  updateAddress(address: AddressUpdateInput!): Address
  deleteAddress(id: ID!): Address
  createProfile(profile: ProfileCreateInput!): Profile
  updateProfile(profile: ProfileUpdateInput!): Profile
  deleteProfile(id: ID!): Profile
}

scalar DateTime

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum Role {
  Customer
  Supplier
}

type Product {
  id: ID!
  name: String!
  description: String
  images: [String!]!
  price: Float
  discount: Float
  code: Int
  stock: Int
  salesCount: Int!
  features: String
  tags: String!
  Manufacturer: String
  isFeatured: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Store!
  reviews: [Reviews!]!
  categories: [Category!]!
  cartItem: CartItem
  orderItem: OrderItem
  colors: [Color!]!
  sizes: [Size!]!
  events: SaleEvent
}

type Color {
  id: ID!
  name: String!
  value: String!
  availability: Boolean
  price: Float
  imageUrl: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]!
}

type Size {
  id: ID!
  name: String!
  value: Float!
  description: String
  availability: Boolean
  price: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]!
}

type Cart {
  id: ID!
  status: String
  user: User!
  createdAt: DateTime!
  cartItems: [CartItem!]!
}

type CartItem {
  id: ID!
  cart: Cart!
  product: Product!
  quantity: Int!
}

type Order {
  id: ID!
  store: Store!
  totalAmount: Float!
  status: OrderStatus!
  orderDate: DateTime!
  orderItems: [OrderItem!]!
  payments: [Payment!]!
  shippingAddress: Address
}

type OrderItem {
  id: ID!
  order: Order!
  product: Product!
  quantity: Int!
  price: Float!
}

type Payment {
  id: ID!
  amount: Float!
  currency: String!
  status: PaymentStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  paymentMethod: String!
}

type Category {
  id: ID!
  name: String!
  products: [Product!]!
}

type Reviews {
  id: ID!
  body: String!
  date: DateTime!
  rate: Int!
  user: User!
  product: Product!
}

type SaleEvent {
  id: ID!
  name: String!
  description: String
  category: String!
  startDate: DateTime!
  finishDate: DateTime!
  status: String
  tags: String
  discount: Float!
  stock: Int!
  images: [String!]!
  featured: Boolean!
  store: Store!
  products: [Product!]!
  totalSales: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Store {
  id: ID!
  name: String!
  description: String!
  logo: String!
  totalSales: Int!
  owner: User!
  address: Address
  products: [Product!]!
  events: [SaleEvent!]!
  order: Order
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  emailVerified: DateTime
  role: Role!
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  reviews: [Reviews!]!
  cart: Cart
  profile: Profile
  address: [Address!]!
  store: Store
}

type Address {
  id: ID!
  street: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
  phoneNumber: String!
  store: Store
  user: User
  order: Order
}

type Profile {
  id: ID!
  firstName: String
  lastName: String
  phoneNumber: String
  bio: String
  picture: String
  user: User!
}